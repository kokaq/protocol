// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/control.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KokaqControlPlane_GetDataplane_FullMethodName    = "/proto.KokaqControlPlane/GetDataplane"
	KokaqControlPlane_GetNamespace_FullMethodName    = "/proto.KokaqControlPlane/GetNamespace"
	KokaqControlPlane_AddNamespace_FullMethodName    = "/proto.KokaqControlPlane/AddNamespace"
	KokaqControlPlane_DeleteNamespace_FullMethodName = "/proto.KokaqControlPlane/DeleteNamespace"
	KokaqControlPlane_AddQueue_FullMethodName        = "/proto.KokaqControlPlane/AddQueue"
	KokaqControlPlane_GetQueue_FullMethodName        = "/proto.KokaqControlPlane/GetQueue"
	KokaqControlPlane_DeleteQueue_FullMethodName     = "/proto.KokaqControlPlane/DeleteQueue"
	KokaqControlPlane_ClearQueue_FullMethodName      = "/proto.KokaqControlPlane/ClearQueue"
	KokaqControlPlane_GetStats_FullMethodName        = "/proto.KokaqControlPlane/GetStats"
)

// KokaqControlPlaneClient is the client API for KokaqControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Control service: queue and configuration management
type KokaqControlPlaneClient interface {
	GetDataplane(ctx context.Context, in *GetDataplaneRequest, opts ...grpc.CallOption) (*GetDataplaneResponse, error)
	GetNamespace(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*KokaqNamespaceResponse, error)
	AddNamespace(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*KokaqNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	AddQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error)
	GetQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error)
	DeleteQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ClearQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetStats(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*KokaqStatsResponse, error)
}

type kokaqControlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewKokaqControlPlaneClient(cc grpc.ClientConnInterface) KokaqControlPlaneClient {
	return &kokaqControlPlaneClient{cc}
}

func (c *kokaqControlPlaneClient) GetDataplane(ctx context.Context, in *GetDataplaneRequest, opts ...grpc.CallOption) (*GetDataplaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataplaneResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_GetDataplane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) GetNamespace(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*KokaqNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqNamespaceResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) AddNamespace(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*KokaqNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqNamespaceResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_AddNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) DeleteNamespace(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) AddQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqQueueResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_AddQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) GetQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqQueueResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_GetQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) DeleteQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_DeleteQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) ClearQueue(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_ClearQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqControlPlaneClient) GetStats(ctx context.Context, in *KokaqNamespaceRequest, opts ...grpc.CallOption) (*KokaqStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqStatsResponse)
	err := c.cc.Invoke(ctx, KokaqControlPlane_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KokaqControlPlaneServer is the server API for KokaqControlPlane service.
// All implementations must embed UnimplementedKokaqControlPlaneServer
// for forward compatibility.
//
// Control service: queue and configuration management
type KokaqControlPlaneServer interface {
	GetDataplane(context.Context, *GetDataplaneRequest) (*GetDataplaneResponse, error)
	GetNamespace(context.Context, *KokaqNamespaceRequest) (*KokaqNamespaceResponse, error)
	AddNamespace(context.Context, *KokaqNamespaceRequest) (*KokaqNamespaceResponse, error)
	DeleteNamespace(context.Context, *KokaqNamespaceRequest) (*StatusResponse, error)
	AddQueue(context.Context, *KokaqQueueRequest) (*KokaqQueueResponse, error)
	GetQueue(context.Context, *KokaqQueueRequest) (*KokaqQueueResponse, error)
	DeleteQueue(context.Context, *KokaqQueueRequest) (*StatusResponse, error)
	ClearQueue(context.Context, *KokaqQueueRequest) (*StatusResponse, error)
	GetStats(context.Context, *KokaqNamespaceRequest) (*KokaqStatsResponse, error)
	mustEmbedUnimplementedKokaqControlPlaneServer()
}

// UnimplementedKokaqControlPlaneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKokaqControlPlaneServer struct{}

func (UnimplementedKokaqControlPlaneServer) GetDataplane(context.Context, *GetDataplaneRequest) (*GetDataplaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataplane not implemented")
}
func (UnimplementedKokaqControlPlaneServer) GetNamespace(context.Context, *KokaqNamespaceRequest) (*KokaqNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedKokaqControlPlaneServer) AddNamespace(context.Context, *KokaqNamespaceRequest) (*KokaqNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamespace not implemented")
}
func (UnimplementedKokaqControlPlaneServer) DeleteNamespace(context.Context, *KokaqNamespaceRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedKokaqControlPlaneServer) AddQueue(context.Context, *KokaqQueueRequest) (*KokaqQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQueue not implemented")
}
func (UnimplementedKokaqControlPlaneServer) GetQueue(context.Context, *KokaqQueueRequest) (*KokaqQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedKokaqControlPlaneServer) DeleteQueue(context.Context, *KokaqQueueRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedKokaqControlPlaneServer) ClearQueue(context.Context, *KokaqQueueRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearQueue not implemented")
}
func (UnimplementedKokaqControlPlaneServer) GetStats(context.Context, *KokaqNamespaceRequest) (*KokaqStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedKokaqControlPlaneServer) mustEmbedUnimplementedKokaqControlPlaneServer() {}
func (UnimplementedKokaqControlPlaneServer) testEmbeddedByValue()                           {}

// UnsafeKokaqControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KokaqControlPlaneServer will
// result in compilation errors.
type UnsafeKokaqControlPlaneServer interface {
	mustEmbedUnimplementedKokaqControlPlaneServer()
}

func RegisterKokaqControlPlaneServer(s grpc.ServiceRegistrar, srv KokaqControlPlaneServer) {
	// If the following call pancis, it indicates UnimplementedKokaqControlPlaneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KokaqControlPlane_ServiceDesc, srv)
}

func _KokaqControlPlane_GetDataplane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).GetDataplane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_GetDataplane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).GetDataplane(ctx, req.(*GetDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).GetNamespace(ctx, req.(*KokaqNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_AddNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).AddNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_AddNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).AddNamespace(ctx, req.(*KokaqNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).DeleteNamespace(ctx, req.(*KokaqNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_AddQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).AddQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_AddQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).AddQueue(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_GetQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).GetQueue(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).DeleteQueue(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_ClearQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).ClearQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_ClearQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).ClearQueue(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqControlPlane_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqControlPlaneServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqControlPlane_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqControlPlaneServer).GetStats(ctx, req.(*KokaqNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KokaqControlPlane_ServiceDesc is the grpc.ServiceDesc for KokaqControlPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KokaqControlPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KokaqControlPlane",
	HandlerType: (*KokaqControlPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataplane",
			Handler:    _KokaqControlPlane_GetDataplane_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _KokaqControlPlane_GetNamespace_Handler,
		},
		{
			MethodName: "AddNamespace",
			Handler:    _KokaqControlPlane_AddNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _KokaqControlPlane_DeleteNamespace_Handler,
		},
		{
			MethodName: "AddQueue",
			Handler:    _KokaqControlPlane_AddQueue_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _KokaqControlPlane_GetQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _KokaqControlPlane_DeleteQueue_Handler,
		},
		{
			MethodName: "ClearQueue",
			Handler:    _KokaqControlPlane_ClearQueue_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _KokaqControlPlane_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control.proto",
}
