// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/shard.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KokaqShardManager_RegisterNode_FullMethodName   = "/proto.KokaqShardManager/RegisterNode"
	KokaqShardManager_UnregisterNode_FullMethodName = "/proto.KokaqShardManager/UnregisterNode"
	KokaqShardManager_RequestShard_FullMethodName   = "/proto.KokaqShardManager/RequestShard"
	KokaqShardManager_GetShard_FullMethodName       = "/proto.KokaqShardManager/GetShard"
	KokaqShardManager_DeleteShard_FullMethodName    = "/proto.KokaqShardManager/DeleteShard"
	KokaqShardManager_ListShards_FullMethodName     = "/proto.KokaqShardManager/ListShards"
)

// KokaqShardManagerClient is the client API for KokaqShardManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Shard service: queue and configuration management
type KokaqShardManagerClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	UnregisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	RequestShard(ctx context.Context, in *GetShardRequest, opts ...grpc.CallOption) (*GetShardResponse, error)
	GetShard(ctx context.Context, in *GetShardRequest, opts ...grpc.CallOption) (*GetShardResponse, error)
	DeleteShard(ctx context.Context, in *GetShardRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListShards(ctx context.Context, in *ListShardsRequest, opts ...grpc.CallOption) (*ListShardsResponse, error)
}

type kokaqShardManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewKokaqShardManagerClient(cc grpc.ClientConnInterface) KokaqShardManagerClient {
	return &kokaqShardManagerClient{cc}
}

func (c *kokaqShardManagerClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, KokaqShardManager_RegisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqShardManagerClient) UnregisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, KokaqShardManager_UnregisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqShardManagerClient) RequestShard(ctx context.Context, in *GetShardRequest, opts ...grpc.CallOption) (*GetShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShardResponse)
	err := c.cc.Invoke(ctx, KokaqShardManager_RequestShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqShardManagerClient) GetShard(ctx context.Context, in *GetShardRequest, opts ...grpc.CallOption) (*GetShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShardResponse)
	err := c.cc.Invoke(ctx, KokaqShardManager_GetShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqShardManagerClient) DeleteShard(ctx context.Context, in *GetShardRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, KokaqShardManager_DeleteShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqShardManagerClient) ListShards(ctx context.Context, in *ListShardsRequest, opts ...grpc.CallOption) (*ListShardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShardsResponse)
	err := c.cc.Invoke(ctx, KokaqShardManager_ListShards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KokaqShardManagerServer is the server API for KokaqShardManager service.
// All implementations must embed UnimplementedKokaqShardManagerServer
// for forward compatibility.
//
// Shard service: queue and configuration management
type KokaqShardManagerServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	UnregisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	RequestShard(context.Context, *GetShardRequest) (*GetShardResponse, error)
	GetShard(context.Context, *GetShardRequest) (*GetShardResponse, error)
	DeleteShard(context.Context, *GetShardRequest) (*StatusResponse, error)
	ListShards(context.Context, *ListShardsRequest) (*ListShardsResponse, error)
	mustEmbedUnimplementedKokaqShardManagerServer()
}

// UnimplementedKokaqShardManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKokaqShardManagerServer struct{}

func (UnimplementedKokaqShardManagerServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedKokaqShardManagerServer) UnregisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterNode not implemented")
}
func (UnimplementedKokaqShardManagerServer) RequestShard(context.Context, *GetShardRequest) (*GetShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestShard not implemented")
}
func (UnimplementedKokaqShardManagerServer) GetShard(context.Context, *GetShardRequest) (*GetShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShard not implemented")
}
func (UnimplementedKokaqShardManagerServer) DeleteShard(context.Context, *GetShardRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShard not implemented")
}
func (UnimplementedKokaqShardManagerServer) ListShards(context.Context, *ListShardsRequest) (*ListShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShards not implemented")
}
func (UnimplementedKokaqShardManagerServer) mustEmbedUnimplementedKokaqShardManagerServer() {}
func (UnimplementedKokaqShardManagerServer) testEmbeddedByValue()                           {}

// UnsafeKokaqShardManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KokaqShardManagerServer will
// result in compilation errors.
type UnsafeKokaqShardManagerServer interface {
	mustEmbedUnimplementedKokaqShardManagerServer()
}

func RegisterKokaqShardManagerServer(s grpc.ServiceRegistrar, srv KokaqShardManagerServer) {
	// If the following call pancis, it indicates UnimplementedKokaqShardManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KokaqShardManager_ServiceDesc, srv)
}

func _KokaqShardManager_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqShardManagerServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqShardManager_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqShardManagerServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqShardManager_UnregisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqShardManagerServer).UnregisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqShardManager_UnregisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqShardManagerServer).UnregisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqShardManager_RequestShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqShardManagerServer).RequestShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqShardManager_RequestShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqShardManagerServer).RequestShard(ctx, req.(*GetShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqShardManager_GetShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqShardManagerServer).GetShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqShardManager_GetShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqShardManagerServer).GetShard(ctx, req.(*GetShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqShardManager_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqShardManagerServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqShardManager_DeleteShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqShardManagerServer).DeleteShard(ctx, req.(*GetShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqShardManager_ListShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqShardManagerServer).ListShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqShardManager_ListShards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqShardManagerServer).ListShards(ctx, req.(*ListShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KokaqShardManager_ServiceDesc is the grpc.ServiceDesc for KokaqShardManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KokaqShardManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KokaqShardManager",
	HandlerType: (*KokaqShardManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _KokaqShardManager_RegisterNode_Handler,
		},
		{
			MethodName: "UnregisterNode",
			Handler:    _KokaqShardManager_UnregisterNode_Handler,
		},
		{
			MethodName: "RequestShard",
			Handler:    _KokaqShardManager_RequestShard_Handler,
		},
		{
			MethodName: "GetShard",
			Handler:    _KokaqShardManager_GetShard_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _KokaqShardManager_DeleteShard_Handler,
		},
		{
			MethodName: "ListShards",
			Handler:    _KokaqShardManager_ListShards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shard.proto",
}
