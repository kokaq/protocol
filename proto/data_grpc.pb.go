// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KokaqDataPlane_New_FullMethodName                      = "/proto.KokaqDataPlane/New"
	KokaqDataPlane_Get_FullMethodName                      = "/proto.KokaqDataPlane/Get"
	KokaqDataPlane_GetStats_FullMethodName                 = "/proto.KokaqDataPlane/GetStats"
	KokaqDataPlane_Delete_FullMethodName                   = "/proto.KokaqDataPlane/Delete"
	KokaqDataPlane_Clear_FullMethodName                    = "/proto.KokaqDataPlane/Clear"
	KokaqDataPlane_Enqueue_FullMethodName                  = "/proto.KokaqDataPlane/Enqueue"
	KokaqDataPlane_Dequeue_FullMethodName                  = "/proto.KokaqDataPlane/Dequeue"
	KokaqDataPlane_Peek_FullMethodName                     = "/proto.KokaqDataPlane/Peek"
	KokaqDataPlane_PeekLock_FullMethodName                 = "/proto.KokaqDataPlane/PeekLock"
	KokaqDataPlane_Ack_FullMethodName                      = "/proto.KokaqDataPlane/Ack"
	KokaqDataPlane_Nack_FullMethodName                     = "/proto.KokaqDataPlane/Nack"
	KokaqDataPlane_Extend_FullMethodName                   = "/proto.KokaqDataPlane/Extend"
	KokaqDataPlane_SetVisibilityTimeout_FullMethodName     = "/proto.KokaqDataPlane/SetVisibilityTimeout"
	KokaqDataPlane_RefreshVisibilityTimeout_FullMethodName = "/proto.KokaqDataPlane/RefreshVisibilityTimeout"
	KokaqDataPlane_ReleaseLock_FullMethodName              = "/proto.KokaqDataPlane/ReleaseLock"
)

// KokaqDataPlaneClient is the client API for KokaqDataPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Data service: queue operations and message handling
type KokaqDataPlaneClient interface {
	New(ctx context.Context, in *KokaqNewQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error)
	Get(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error)
	GetStats(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqStatsResponse, error)
	Delete(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Clear(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
	Peek(ctx context.Context, in *PeekRequest, opts ...grpc.CallOption) (*PeekResponse, error)
	PeekLock(ctx context.Context, in *PeekLockRequest, opts ...grpc.CallOption) (*PeekLockResponse, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error)
	Extend(ctx context.Context, in *ExtendVisibilityTimeoutRequest, opts ...grpc.CallOption) (*VisibilityTimeoutResponse, error)
	SetVisibilityTimeout(ctx context.Context, in *SetVisibilityTimeoutRequest, opts ...grpc.CallOption) (*VisibilityTimeoutResponse, error)
	RefreshVisibilityTimeout(ctx context.Context, in *RefreshVisibilityTimeoutRequest, opts ...grpc.CallOption) (*VisibilityTimeoutResponse, error)
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error)
}

type kokaqDataPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewKokaqDataPlaneClient(cc grpc.ClientConnInterface) KokaqDataPlaneClient {
	return &kokaqDataPlaneClient{cc}
}

func (c *kokaqDataPlaneClient) New(ctx context.Context, in *KokaqNewQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqQueueResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_New_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Get(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqQueueResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) GetStats(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*KokaqStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KokaqStatsResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Delete(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Clear(ctx context.Context, in *KokaqQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Dequeue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Peek(ctx context.Context, in *PeekRequest, opts ...grpc.CallOption) (*PeekResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeekResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Peek_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) PeekLock(ctx context.Context, in *PeekLockRequest, opts ...grpc.CallOption) (*PeekLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeekLockResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_PeekLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Ack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NackResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Nack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) Extend(ctx context.Context, in *ExtendVisibilityTimeoutRequest, opts ...grpc.CallOption) (*VisibilityTimeoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityTimeoutResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_Extend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) SetVisibilityTimeout(ctx context.Context, in *SetVisibilityTimeoutRequest, opts ...grpc.CallOption) (*VisibilityTimeoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityTimeoutResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_SetVisibilityTimeout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) RefreshVisibilityTimeout(ctx context.Context, in *RefreshVisibilityTimeoutRequest, opts ...grpc.CallOption) (*VisibilityTimeoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityTimeoutResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_RefreshVisibilityTimeout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kokaqDataPlaneClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseLockResponse)
	err := c.cc.Invoke(ctx, KokaqDataPlane_ReleaseLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KokaqDataPlaneServer is the server API for KokaqDataPlane service.
// All implementations must embed UnimplementedKokaqDataPlaneServer
// for forward compatibility.
//
// Data service: queue operations and message handling
type KokaqDataPlaneServer interface {
	New(context.Context, *KokaqNewQueueRequest) (*KokaqQueueResponse, error)
	Get(context.Context, *KokaqQueueRequest) (*KokaqQueueResponse, error)
	GetStats(context.Context, *KokaqQueueRequest) (*KokaqStatsResponse, error)
	Delete(context.Context, *KokaqQueueRequest) (*StatusResponse, error)
	Clear(context.Context, *KokaqQueueRequest) (*StatusResponse, error)
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error)
	Peek(context.Context, *PeekRequest) (*PeekResponse, error)
	PeekLock(context.Context, *PeekLockRequest) (*PeekLockResponse, error)
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	Nack(context.Context, *NackRequest) (*NackResponse, error)
	Extend(context.Context, *ExtendVisibilityTimeoutRequest) (*VisibilityTimeoutResponse, error)
	SetVisibilityTimeout(context.Context, *SetVisibilityTimeoutRequest) (*VisibilityTimeoutResponse, error)
	RefreshVisibilityTimeout(context.Context, *RefreshVisibilityTimeoutRequest) (*VisibilityTimeoutResponse, error)
	ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error)
	mustEmbedUnimplementedKokaqDataPlaneServer()
}

// UnimplementedKokaqDataPlaneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKokaqDataPlaneServer struct{}

func (UnimplementedKokaqDataPlaneServer) New(context.Context, *KokaqNewQueueRequest) (*KokaqQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Get(context.Context, *KokaqQueueRequest) (*KokaqQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKokaqDataPlaneServer) GetStats(context.Context, *KokaqQueueRequest) (*KokaqStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Delete(context.Context, *KokaqQueueRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Clear(context.Context, *KokaqQueueRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Peek(context.Context, *PeekRequest) (*PeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peek not implemented")
}
func (UnimplementedKokaqDataPlaneServer) PeekLock(context.Context, *PeekLockRequest) (*PeekLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeekLock not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Ack(context.Context, *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Nack(context.Context, *NackRequest) (*NackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}
func (UnimplementedKokaqDataPlaneServer) Extend(context.Context, *ExtendVisibilityTimeoutRequest) (*VisibilityTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extend not implemented")
}
func (UnimplementedKokaqDataPlaneServer) SetVisibilityTimeout(context.Context, *SetVisibilityTimeoutRequest) (*VisibilityTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVisibilityTimeout not implemented")
}
func (UnimplementedKokaqDataPlaneServer) RefreshVisibilityTimeout(context.Context, *RefreshVisibilityTimeoutRequest) (*VisibilityTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshVisibilityTimeout not implemented")
}
func (UnimplementedKokaqDataPlaneServer) ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedKokaqDataPlaneServer) mustEmbedUnimplementedKokaqDataPlaneServer() {}
func (UnimplementedKokaqDataPlaneServer) testEmbeddedByValue()                        {}

// UnsafeKokaqDataPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KokaqDataPlaneServer will
// result in compilation errors.
type UnsafeKokaqDataPlaneServer interface {
	mustEmbedUnimplementedKokaqDataPlaneServer()
}

func RegisterKokaqDataPlaneServer(s grpc.ServiceRegistrar, srv KokaqDataPlaneServer) {
	// If the following call pancis, it indicates UnimplementedKokaqDataPlaneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KokaqDataPlane_ServiceDesc, srv)
}

func _KokaqDataPlane_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqNewQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_New_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).New(ctx, req.(*KokaqNewQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Get(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).GetStats(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Delete(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KokaqQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Clear(ctx, req.(*KokaqQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Peek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Peek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Peek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Peek(ctx, req.(*PeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_PeekLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeekLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).PeekLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_PeekLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).PeekLock(ctx, req.(*PeekLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Nack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Nack(ctx, req.(*NackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendVisibilityTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_Extend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).Extend(ctx, req.(*ExtendVisibilityTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_SetVisibilityTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVisibilityTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).SetVisibilityTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_SetVisibilityTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).SetVisibilityTimeout(ctx, req.(*SetVisibilityTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_RefreshVisibilityTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshVisibilityTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).RefreshVisibilityTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_RefreshVisibilityTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).RefreshVisibilityTimeout(ctx, req.(*RefreshVisibilityTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KokaqDataPlane_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KokaqDataPlaneServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KokaqDataPlane_ReleaseLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KokaqDataPlaneServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KokaqDataPlane_ServiceDesc is the grpc.ServiceDesc for KokaqDataPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KokaqDataPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KokaqDataPlane",
	HandlerType: (*KokaqDataPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _KokaqDataPlane_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KokaqDataPlane_Get_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _KokaqDataPlane_GetStats_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KokaqDataPlane_Delete_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _KokaqDataPlane_Clear_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _KokaqDataPlane_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _KokaqDataPlane_Dequeue_Handler,
		},
		{
			MethodName: "Peek",
			Handler:    _KokaqDataPlane_Peek_Handler,
		},
		{
			MethodName: "PeekLock",
			Handler:    _KokaqDataPlane_PeekLock_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _KokaqDataPlane_Ack_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _KokaqDataPlane_Nack_Handler,
		},
		{
			MethodName: "Extend",
			Handler:    _KokaqDataPlane_Extend_Handler,
		},
		{
			MethodName: "SetVisibilityTimeout",
			Handler:    _KokaqDataPlane_SetVisibilityTimeout_Handler,
		},
		{
			MethodName: "RefreshVisibilityTimeout",
			Handler:    _KokaqDataPlane_RefreshVisibilityTimeout_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _KokaqDataPlane_ReleaseLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data.proto",
}
